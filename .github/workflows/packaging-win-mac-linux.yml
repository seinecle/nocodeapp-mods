name: Build for Release

on:
  [push]

env:
  pkg-name: 'nocode-app'
  pkg-version: '1.0'
  pkg-description: 'no code app for data science jobs'
  pkg-vendor: 'Clement Levallois - www.clementlevallois.net'
  #the short version is useful for the linux build, which truncates the 1.0 into 1
  pkg-version-short: '1'
  #increment the minor version otherwise duplicate tags -> fail
  pkg-version-minor: '0.4'
  pkg-release-notes: 'release-notes.md'



jobs:
  windows-msi-installer-creation:
    runs-on: [windows-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '15'
        java-package: jdk
        architecture: x64

    - name: View artifacts
      run: dir

    - name: run jlink
      run: "jlink --no-header-files --no-man-pages --module-path win/core --add-modules net.clementlevallois.nocodeapp.core --bind-services --output image --compress=1"

    - name: run jpackage
      run: "jpackage --type msi --win-menu --win-menu-group ${{ env.pkg-name }} --win-dir-chooser --win-shortcut --icon logo.ico --win-dir-chooser --app-version ${{ env.pkg-version }} --description '${{ env.pkg-description }}' --vendor '${{ env.pkg-vendor }}' --win-shortcut --win-console -n ${{ env.pkg-name }}-windows --module-path win/core --runtime-image image -m net.clementlevallois.nocodeapp.core/net.clementlevallois.nocodeappcore.controller.RealMain"

    - name: View artifacts
      run: dir

    - name: upload msi installer to temp github action working folder
      uses: actions/upload-artifact@v2
      with:
        name: msi
        # we upload release notes just on one job (this one) to avoid corruption with simulatenous uploads of the same file
        path: |
          ${{ env.pkg-name }}-windows-${{ env.pkg-version }}.msi
          ${{ env.pkg-release-notes }}
          
        if-no-files-found: warn

  macos-dmg-installer-creation:
    runs-on: [macos-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '15'
        java-package: jdk
        architecture: x64

    - name: View artifacts
      run: ls

    - name: produce an app image with jpackage
      run: "jpackage --type app-image -n ${{ env.pkg-name }}-macos --app-version ${{ env.pkg-version }} --icon logo.ico --description '${{ env.pkg-description }}' --vendor '${{ env.pkg-vendor }}' --module-path mac/core -m net.clementlevallois.nocodeapp.core/net.clementlevallois.nocodeappcore.controller.RealMain"

    - name: Load app certificate
      env: 
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.MACOS_CERTIFICATE_PWD }}
      #source: https://localazy.com/blog/how-to-automatically-sign-macos-apps-using-github-actions

      run: |
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
        security delete-keychain "keychain.${{ env.pkg-version-short }}" || :
        security create-keychain -p TempPwD==1234 keychain.${{ env.pkg-version-short }}
        security default-keychain -s keychain.${{ env.pkg-version-short }}
        security unlock-keychain -p TempPwD==1234 keychain.${{ env.pkg-version-short }}
        security import certificate.p12 -k keychain.${{ env.pkg-version-short }} -P $MACOS_CERTIFICATE_PWD -T /usr/bin/codesign
        security find-identity -v

    - name: package the app into a dmg
      run: "jpackage --type dmg -n ${{ env.pkg-name }}-macos --app-version ${{ env.pkg-version }} --description '${{ env.pkg-description }}' --vendor '${{ env.pkg-vendor }}' --app-image ${{ env.pkg-name }}-macos.app --mac-sign --mac-package-signing-prefix ${{ secrets.MACOS_SIGNING_PREFIX }} --mac-signing-key-user-name ${{ secrets.MAC_OS_SIGNING_KEY_USER_NAME }}"

    - name: View artifacts
      run: ls
    
    - name: Codesign executable
      env: 
          MACOS_CERTIFICATE_: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD_: ${{ secrets.MACOS_CERTIFICATE_PWD }}

      run: |
        echo $MACOS_CERTIFICATE_ | base64 --decode > certificate_.p12
        security delete-keychain "keychain.${{ env.pkg-version-short }}" || :
        security create-keychain -p TempPwD==1234 keychain.${{ env.pkg-version-short }}
        security default-keychain -s keychain.${{ env.pkg-version-short }}
        security unlock-keychain -p TempPwD==1234 keychain.${{ env.pkg-version-short }}
        security import certificate_.p12 -k keychain.${{ env.pkg-version-short }} -P $MACOS_CERTIFICATE_PWD_ -T /usr/bin/codesign
        security find-identity -v
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k TempPwD==1234 keychain.${{ env.pkg-version-short }}
        /usr/bin/codesign --force -s 'Developer ID Application: Clement Levallois' ./${{ env.pkg-name }}-macos-${{ env.pkg-version }}.dmg -v

    - name: View artifacts
      run: ls
    
    - name: upload dmg installer to temp github action working folder
      uses: actions/upload-artifact@v2
      with:
        name: dmg
        path: "${{ env.pkg-name }}-macos-${{ env.pkg-version }}.dmg"
        if-no-files-found: warn
 
  linux-deb-installer-creation:
    runs-on: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-java@v1
      with:
        java-version: '15'
        java-package: jdk
        architecture: x64

    - name: View artifacts
      run: ls
 
    - name: run jlink
      run: "jlink --no-header-files --no-man-pages --module-path linux/core --add-modules net.clementlevallois.nocodeapp.core --bind-services --output image --compress=1"

    - name: run jpackage
      run: "jpackage --type deb -n ${{ env.pkg-name }}-linux --app-version ${{ env.pkg-version }} --description '${{ env.pkg-description }}' --vendor '${{ env.pkg-vendor }}' --linux-shortcut --icon logo.ico --module-path linux/core --runtime-image image -m net.clementlevallois.nocodeapp.core/net.clementlevallois.nocodeappcore.controller.RealMain"

    - name: View artifacts
      run: ls

    - name: upload deb installer to temp github action working folder
      uses: actions/upload-artifact@v2
      with:
        name: deb
        #ATTENTION HERE LINUX FOLLOWS THIS WEIRD PATTERN OF NAMING AND ADDS UNDERSCORE + VERSION, SO I FOLLOW THIS PATTERN
        path: "${{ env.pkg-name }}-linux_${{ env.pkg-version }}-${{ env.pkg-version-short }}_amd64.deb"
        if-no-files-found: warn

          
  creates-release-and-upload-all-installers-to-it:
    needs: [windows-msi-installer-creation,macos-dmg-installer-creation,linux-deb-installer-creation]
    runs-on: [ubuntu-latest]
    steps:
    - name: Download all installers and also the release notes
      uses: actions/download-artifact@v2
        
    - name: View artifacts
      run: ls

    - name: create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v.${{ env.pkg-version }}.${{ env.pkg-version-minor }}
        release_name: Release ${{ env.pkg-version }}.${{ env.pkg-version-minor }}
        # release notes are stored within the win folder
        body_path: msi/${{ env.pkg-release-notes }}
        draft: false
        prerelease: false
       
    - name: Upload all installers to release page
      id: upload-release-asset 
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v.${{ env.pkg-version }}.${{ env.pkg-version-minor }}
        name: Release ${{ env.pkg-version }}.${{ env.pkg-version-minor }}
        # please note that the underscore in the name of the linux installer is not a mistake: it is added automatically by the linux installer build (see comment above)
        files: |
          msi/${{ env.pkg-name }}-windows-${{ env.pkg-version }}.msi
          dmg/${{ env.pkg-name }}-macos-${{ env.pkg-version }}.dmg
          deb/${{ env.pkg-name }}-linux_${{ env.pkg-version }}-${{ env.pkg-version-short }}_amd64.deb
